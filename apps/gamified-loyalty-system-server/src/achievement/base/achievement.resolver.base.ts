/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Achievement } from "./Achievement";
import { AchievementCountArgs } from "./AchievementCountArgs";
import { AchievementFindManyArgs } from "./AchievementFindManyArgs";
import { AchievementFindUniqueArgs } from "./AchievementFindUniqueArgs";
import { CreateAchievementArgs } from "./CreateAchievementArgs";
import { UpdateAchievementArgs } from "./UpdateAchievementArgs";
import { DeleteAchievementArgs } from "./DeleteAchievementArgs";
import { AchievementService } from "../achievement.service";
@graphql.Resolver(() => Achievement)
export class AchievementResolverBase {
  constructor(protected readonly service: AchievementService) {}

  async _achievementsMeta(
    @graphql.Args() args: AchievementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Achievement])
  async achievements(
    @graphql.Args() args: AchievementFindManyArgs
  ): Promise<Achievement[]> {
    return this.service.achievements(args);
  }

  @graphql.Query(() => Achievement, { nullable: true })
  async achievement(
    @graphql.Args() args: AchievementFindUniqueArgs
  ): Promise<Achievement | null> {
    const result = await this.service.achievement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Achievement)
  async createAchievement(
    @graphql.Args() args: CreateAchievementArgs
  ): Promise<Achievement> {
    return await this.service.createAchievement({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Achievement)
  async updateAchievement(
    @graphql.Args() args: UpdateAchievementArgs
  ): Promise<Achievement | null> {
    try {
      return await this.service.updateAchievement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Achievement)
  async deleteAchievement(
    @graphql.Args() args: DeleteAchievementArgs
  ): Promise<Achievement | null> {
    try {
      return await this.service.deleteAchievement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
