/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CoffeeshopService } from "../coffeeshop.service";
import { CoffeeshopCreateInput } from "./CoffeeshopCreateInput";
import { Coffeeshop } from "./Coffeeshop";
import { CoffeeshopFindManyArgs } from "./CoffeeshopFindManyArgs";
import { CoffeeshopWhereUniqueInput } from "./CoffeeshopWhereUniqueInput";
import { CoffeeshopUpdateInput } from "./CoffeeshopUpdateInput";
import { AdminFindManyArgs } from "../../admin/base/AdminFindManyArgs";
import { Admin } from "../../admin/base/Admin";
import { AdminWhereUniqueInput } from "../../admin/base/AdminWhereUniqueInput";
import { RewardFindManyArgs } from "../../reward/base/RewardFindManyArgs";
import { Reward } from "../../reward/base/Reward";
import { RewardWhereUniqueInput } from "../../reward/base/RewardWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

export class CoffeeshopControllerBase {
  constructor(protected readonly service: CoffeeshopService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coffeeshop })
  async createCoffeeshop(
    @common.Body() data: CoffeeshopCreateInput
  ): Promise<Coffeeshop> {
    return await this.service.createCoffeeshop({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Coffeeshop] })
  @ApiNestedQuery(CoffeeshopFindManyArgs)
  async coffeeshops(@common.Req() request: Request): Promise<Coffeeshop[]> {
    const args = plainToClass(CoffeeshopFindManyArgs, request.query);
    return this.service.coffeeshops({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coffeeshop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async coffeeshop(
    @common.Param() params: CoffeeshopWhereUniqueInput
  ): Promise<Coffeeshop | null> {
    const result = await this.service.coffeeshop({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coffeeshop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCoffeeshop(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() data: CoffeeshopUpdateInput
  ): Promise<Coffeeshop | null> {
    try {
      return await this.service.updateCoffeeshop({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coffeeshop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCoffeeshop(
    @common.Param() params: CoffeeshopWhereUniqueInput
  ): Promise<Coffeeshop | null> {
    try {
      return await this.service.deleteCoffeeshop({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/admins")
  @ApiNestedQuery(AdminFindManyArgs)
  async findAdmins(
    @common.Req() request: Request,
    @common.Param() params: CoffeeshopWhereUniqueInput
  ): Promise<Admin[]> {
    const query = plainToClass(AdminFindManyArgs, request.query);
    const results = await this.service.findAdmins(params.id, {
      ...query,
      select: {
        coffeeshop: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/admins")
  async connectAdmins(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: AdminWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admins: {
        connect: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/admins")
  async updateAdmins(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: AdminWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admins: {
        set: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/admins")
  async disconnectAdmins(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: AdminWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admins: {
        disconnect: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rewards")
  @ApiNestedQuery(RewardFindManyArgs)
  async findRewards(
    @common.Req() request: Request,
    @common.Param() params: CoffeeshopWhereUniqueInput
  ): Promise<Reward[]> {
    const query = plainToClass(RewardFindManyArgs, request.query);
    const results = await this.service.findRewards(params.id, {
      ...query,
      select: {
        coffeeshop: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        points: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rewards")
  async connectRewards(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        connect: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rewards")
  async updateRewards(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        set: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rewards")
  async disconnectRewards(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        disconnect: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: CoffeeshopWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        admin: {
          select: {
            id: true,
          },
        },

        coffeeshop: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        points: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: CoffeeshopWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateCoffeeshop({
      where: params,
      data,
      select: { id: true },
    });
  }
}
